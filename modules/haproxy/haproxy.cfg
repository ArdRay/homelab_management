global
    log 127.0.0.1:514 local0
    lua-load /usr/local/etc/haproxy/auth-request.lua

    ssl-default-bind-options ssl-min-ver TLSv1.2 prefer-client-ciphers
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-ciphers ECDH+AESGCM:ECDH+CHACHA20:ECDH+AES256:ECDH+AES128:!aNULL:!SHA1:!AESCCM

    ssl-default-server-options ssl-min-ver TLSv1.2
    ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-server-ciphers ECDH+AESGCM:ECDH+CHACHA20:ECDH+AES256:ECDH+AES128:!aNULL:!SHA1:!AESCCM

    tune.ssl.default-dh-param 2048

    chroot /var/lib/haproxy
    user haproxy
    group haproxy
    daemon

defaults
    mode http
    log global
    option httplog
    option forwardfor

    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms

frontend fe_http
    #log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r %sslv %sslc %[ssl_fc_cipherlist_str]"
    bind *:443 ssl crt /etc/haproxy/certs/ alpn http/1.1

    # Host ACLs
    acl protected-frontends hdr(host) -m reg -i ^(?i)(emby)\.mxard\.cloud
    # acl protected-frontends-basic hdr(host) -m reg -i ^(?i)(heimdall)\.example\.com
    # acl host-authelia hdr(host) -i auth.example.com
    acl host-emby hdr(host) -i emby.mxard.cloud
    # acl host-heimdall hdr(host) -i heimdall.example.com

    # This is required if utilising basic auth with /api/verify?auth=basic
    http-request set-var(txn.host) hdr(Host)
    http-request set-var(req.scheme) str(https) if { ssl_fc }
    http-request set-var(req.scheme) str(http) if !{ ssl_fc }
    http-request set-var(req.questionmark) str(?) if { query -m found }
   
    # These are optional if you wish to use the Methods rule in the access_control section.
    #http-request set-var(req.method) str(CONNECT) if { method CONNECT }
    #http-request set-var(req.method) str(GET) if { method GET }
    #http-request set-var(req.method) str(HEAD) if { method HEAD }
    #http-request set-var(req.method) str(OPTIONS) if { method OPTIONS }
    #http-request set-var(req.method) str(POST) if { method POST }
    #http-request set-var(req.method) str(TRACE) if { method TRACE }
    #http-request set-var(req.method) str(PUT) if { method PUT }
    #http-request set-var(req.method) str(PATCH) if { method PATCH }
    #http-request set-var(req.method) str(DELETE) if { method DELETE }
    #http-request set-header X-Forwarded-Method %[var(req.method)]

    # Required headers
    http-request set-header X-Real-IP %[src]
    http-request set-header X-Forwarded-Method %[var(req.method)]
    http-request set-header X-Forwarded-Proto %[var(req.scheme)]
    http-request set-header X-Forwarded-Host %[req.hdr(Host)]
    http-request set-header X-Forwarded-Uri %[path]%[var(req.questionmark)]%[query]

    # Protect endpoints with haproxy-auth-request and Authelia
    http-request lua.auth-request be_authelia_proxy /api/verify if protected-frontends
    # Force `Authorization` header via query arg to /api/verify
    #http-request lua.auth-request be_authelia_proxy /api/verify?auth=basic if protected-frontends-basic

    # Redirect protected-frontends to Authelia if not authenticated
    http-request redirect location https://idp.mxard.cloud/?rd=%[var(req.scheme)]://%[base]%[var(req.questionmark)]%[query] if protected-frontends !{ var(txn.auth_response_successful) -m bool }
    # Send 401 and pass `WWW-Authenticate` header on protected-frontend-basic if not pre-authenticated
    #http-request set-var(txn.auth) var(req.auth_response_header.www_authenticate) if protected-frontends-basic !{ var(txn.auth_response_successful) -m bool }
    #http-response deny deny_status 401 hdr WWW-Authenticate %[var(txn.auth)] if { var(txn.host) -m reg -i ^(?i)(emby)\.mxard\.cloud } !{ var(txn.auth_response_successful) -m bool }
    http-response deny if { var(txn.host) -m reg -i ^(?i)(emby)\.mxard\.cloud } !{ var(txn.auth_response_successful) -m bool }

    # Service backend route(s)
    use_backend be_emby if host-emby
    #use_backend be_heimdall if host-heimdall

backend be_authelia_proxy
    mode http
    server authelia_proxy idp.mxard.cloud:443 weight 10 maxconn 10 ssl verify none check

backend be_emby
    # Pass Remote-User, Remote-Name, Remote-Email and Remote-Groups headers
    acl remote_user_exist var(req.auth_response_header.remote_user) -m found
    acl remote_groups_exist var(req.auth_response_header.remote_groups) -m found
    acl remote_name_exist var(req.auth_response_header.remote_name) -m found
    acl remote_email_exist var(req.auth_response_header.remote_email) -m found
    http-request set-header Remote-User %[var(req.auth_response_header.remote_user)] if remote_user_exist
    http-request set-header Remote-Groups %[var(req.auth_response_header.remote_groups)] if remote_groups_exist
    http-request set-header Remote-Name %[var(req.auth_response_header.remote_name)] if remote_name_exist
    http-request set-header Remote-Email %[var(req.auth_response_header.remote_email)] if remote_email_exist

    server emby emby.int.mxard.tech:443 weight 10 maxconn 10 ssl verify none check

# backend be_heimdall
#     # Pass Remote-User, Remote-Name, Remote-Email and Remote-Groups headers
#     acl remote_user_exist var(req.auth_response_header.remote_user) -m found
#     acl remote_groups_exist var(req.auth_response_header.remote_groups) -m found
#     acl remote_name_exist var(req.auth_response_header.remote_name) -m found
#     acl remote_email_exist var(req.auth_response_header.remote_email) -m found
#     http-request set-header Remote-User %[var(req.auth_response_header.remote_user)] if remote_user_exist
#     http-request set-header Remote-Groups %[var(req.auth_response_header.remote_groups)] if remote_groups_exist
#     http-request set-header Remote-Name %[var(req.auth_response_header.remote_name)] if remote_name_exist
#     http-request set-header Remote-Email %[var(req.auth_response_header.remote_email)] if remote_email_exist

#     server heimdall heimdall:443 ssl verify none
